local genv = getgenv and getgenv() or {}
local renv = getrenv and getrenv() or {}

local clonefunction = genv.clonefunction or function(f) return f end
local cloneref = genv.cloneref or function(r) return r end
local hook = genv.hookfunction or function(f) return f end

local game = cloneref(renv.game)
local IsA = clonefunction(game.IsA)
local getrawmetatable = clonefunction(getrawmetatable)
local Index = clonefunction(getrawmetatable(game).__index)

local ReplicatedStorage = cloneref(game:GetService("ReplicatedStorage"))
local Teleports_RequestTeleport = ReplicatedStorage:WaitForChild("Network"):WaitForChild("Teleports_RequestTeleport")

local Map = workspace:FindFirstChild("Map") or workspace:FindFirstChild("Map2") or workspace:FindFirstChild("Map3")
local LocalPlayer = game:GetService("Players").LocalPlayer
local HRP = LocalPlayer.Character.HumanoidRootPart

local OldNamecall
OldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
    local method = getnamecallmethod()
    if IsA(self, "RemoteFunction") and self == Teleports_RequestTeleport and (method == "InvokeServer" or method == "invokeServer") then
        local args = {...}
        for _, v in pairs(Map:GetChildren()) do
            if string.find(v.Name, args[1]) then
                repeat HRP.CFrame = v.PERSISTENT.Teleport.CFrame task.wait() until v:FindFirstChild("INTERACT")
                break
            end
        end
        return unpack(args)
    end
    return OldNamecall(self, ...)
end)
